{
    "rank": 3406,
    "username": "wubinray87",
    "score": 12,
    "finish_time": "00:20:23",
    "Q1": {
        "solve_time": "00:04:16",
        "fail_count": 0,
        "lang": "cpp",
        "code": "class Solution {\npublic:\n    int pivotInteger(int n) {\n        int sum = 0;\n        for (int i = 1; i <= n; ++i) {\n            sum += i;\n        }\n        \n        int tmp = 0;\n        for (int i = 1; i <= n; ++i) {\n            tmp += i;\n            if (tmp == sum - tmp + i) {\n                return i;\n            }\n        }\n        return -1;\n    }\n};"
    },
    "Q2": {
        "solve_time": "00:07:39",
        "fail_count": 0,
        "lang": "cpp",
        "code": "class Solution {\npublic:\n    int appendCharacters(string s, string t) {\n        int m = s.size(), n = t.size();\n        \n        int fast = 0, slow = 0;\n        while (fast < m && slow < n) {\n            if (s[fast] == t[slow]) {\n                slow++;\n            }\n            fast++;\n        }\n        return t.size() - slow;\n    }\n};"
    },
    "Q3": {
        "solve_time": "00:20:23",
        "fail_count": 0,
        "lang": "cpp",
        "code": "/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode() : val(0), next(nullptr) {}\n *     ListNode(int x) : val(x), next(nullptr) {}\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\n * };\n */\nclass Solution {\npublic:\n    ListNode* removeNodes(ListNode* head) {\n        auto dummy = std::make_unique<ListNode>(0, head);\n        \n        std::vector<ListNode*> nodes;\n        auto* ptr = dummy->next;\n        while (ptr) {\n            nodes.push_back(ptr);\n            ptr = ptr->next;\n        }\n        \n        int maxVal = INT_MIN;\n        std::vector<bool> rm(nodes.size(), false);\n        for (int i = nodes.size()-1; i >= 0; --i) {\n            if (nodes[i]->val < maxVal) {\n                rm[i] = true;\n            }\n            maxVal = std::max(maxVal, nodes[i]->val);\n        }\n        \n        ptr = dummy.get();\n        for (int i = 0; i < nodes.size(); ++i) {\n            if (!rm[i]) {\n                ptr->next = nodes[i];\n                ptr = ptr->next;\n            }\n        }\n        return dummy->next;\n    }\n};"
    },
    "Q4": {}
}
