{
    "rank": 431,
    "username": "leovincentseles",
    "score": 13,
    "finish_time": "01:32:31",
    "Q1": {
        "solve_time": "00:02:15",
        "fail_count": 0,
        "lang": "cpp",
        "code": "class Solution {\npublic:\n    int findFinalValue(vector<int>& nums, int original) {\n        unordered_set<int> numSet;\n        numSet.insert(nums.begin(), nums.end());\n        \n        while (numSet.count(original) != 0)\n            original *= 2;\n        \n        return original;\n    }\n};"
    },
    "Q2": {
        "solve_time": "00:10:01",
        "fail_count": 0,
        "lang": "cpp",
        "code": "/*\nClarification:\n    Given:\n        vector<int> nums\n    Return:\n        vector<int> indices    \n            all distinct indices, that can make highest score\n            order is not needed\n\n*/\n\nclass Solution {\npublic:\n    vector<int> maxScoreIndices(vector<int>& nums) {\n        int N = nums.size(), maxScore = -1;\n        vector<int> result;\n        vector<int> left(N+1, 0), right(N+1, 0);\n        \n        for (int i=1; i<=N; ++i)\n            left[i] = left[i-1] + ((nums[i-1] == 0)? 1: 0);\n        \n        for (int i=N-1; i>=0; --i)\n            right[i] = right[i+1] + ((nums[i] == 1)? 1: 0);\n        \n        for (int i=0; i<=N; ++i) {\n            int score = left[i] + right[i];\n            if (score > maxScore) {\n                maxScore = score;\n                result.clear();\n                result.push_back(i);\n            } else if (score == maxScore)\n                result.push_back(i);            \n        }                        \n        \n        return result;\n    }\n};"
    },
    "Q3": {},
    "Q4": {
        "solve_time": "01:12:31",
        "fail_count": 4,
        "lang": "cpp",
        "code": "/*\nClarification:\n    Given:\n        vector<string> words\n        \n\n*/\n\nclass MySet {\npublic:\n    unordered_multiset<int> numSet[27];  \n    int size;\n    MySet() {\n        size = 0;\n    }\n    \n    void insert(int len, int num) {\n        numSet[len].insert(num);\n        ++size;\n    }\n    \n    void erase() {\n        --size;\n    }\n    \n    bool empty() {\n        return size == 0;\n    }\n};\n\nclass Solution {\nprivate:\n    int countOne(int num) {\n        int count = 0;\n        while (num) {\n            num &= (num - 1);\n            ++count;\n        }\n        \n        return count;\n    }\n    bool isNeighbor(int numA, int numB, int lenA, int lenB) {        \n        if (abs(lenA - lenB) > 1)\n            return false;\n        \n        if (lenA == lenB)\n            return countOne(numA ^ numB) <= 2;\n        \n        if (lenA < lenB)\n            return countOne(numB & (~numA)) == 1;\n        return countOne(numA & (~numB)) == 1;\n    }\n    int numStr(string &word) {\n        int num = 0;\n        for (char ch: word) \n            num |= 1 << (ch - 'a');\n        return num;\n    }\npublic:\n    vector<int> groupStrings(vector<string>& words) {                     \n        int maxSet = 0, groups;\n        MySet mySet;\n        \n        for (string &word: words) {\n            int num = numStr(word);\n            mySet.insert(countOne(num), num);            \n        }            \n        \n        for (groups=0; !mySet.empty(); ++groups) {\n            queue<pair<int, int>> bfsQueue;\n            \n            for (int i=0; i<27; ++i) {\n                if (mySet.numSet[i].empty() == false) {\n                    bfsQueue.push({i, *mySet.numSet[i].begin()});\n                    mySet.numSet[i].erase(mySet.numSet[i].begin());\n                    mySet.erase();\n                    break;\n                }\n            }            \n            \n            int size = 0;\n            \n            while (!bfsQueue.empty()) {                \n                auto curr = bfsQueue.front(); bfsQueue.pop();\n                ++size;\n                \n                for (int len: {curr.first-1, curr.first, curr.first+1}) {\n                    if (len < 0 || len > 26)\n                        continue;\n                    \n                    for (auto it=mySet.numSet[len].begin(); it!=mySet.numSet[len].end();) {\n                        int neighbor = *it;\n                                                \n                        if (isNeighbor(curr.second, neighbor, curr.first, len)) {\n                            bfsQueue.push({len, neighbor});\n                            it = mySet.numSet[len].erase(it);\n                            mySet.erase();\n                        } else {\n                            ++it;\n                        }                        \n                    }                                                \n                }                \n            }\n            \n            //printf(\"%d\\n\", size);\n            \n            maxSet = max(maxSet, size);\n        }       \n        \n        return {groups, maxSet};        \n    }\n};"
    }
}
