{
    "rank": 9355,
    "username": "wubinray87",
    "score": 12,
    "finish_time": "02:04:33",
    "Q1": {
        "solve_time": "00:02:10",
        "fail_count": 2,
        "lang": "cpp",
        "code": "class Solution {\npublic:\n    int commonFactors(int a, int b) {\n        int count = 0;\n        int minAB = std::min(a, b);\n        for (int i = 1; i <= minAB; ++i) {\n            if (a % i == 0 && b % i == 0) {\n                count++;\n            }\n        }\n        return count;\n    }\n};"
    },
    "Q2": {
        "solve_time": "00:15:38",
        "fail_count": 1,
        "lang": "cpp",
        "code": "class Solution {\npublic:\n    int maxSum(vector<vector<int>>& grid) {\n        if (grid.size() < 3) {\n            return 0;\n        }\n        \n        int maxSum = 0;\n        \n        for (int i = 0; i <= grid.size()-3; ++i) {\n            int sum = 0;\n            for (int j = 0; j < 3; ++j) {\n                for (int k = 0; k < 3; ++k) {\n                    sum += grid[i+j][k];\n                }\n            }\n            maxSum = std::max(maxSum, sum - grid[i+1][0] - grid[i+1][2]);\n            \n            for (int j = 3; j < grid[0].size(); ++j) {\n                sum -= (grid[i][j-3] + grid[i+1][j-3] + grid[i+2][j-3]);\n                sum += (grid[i][j] + grid[i+1][j] + grid[i+2][j]);\n                maxSum = std::max(maxSum, sum - grid[i+1][j] - grid[i+1][j-2]);\n            }\n        }\n        return maxSum;\n    }\n};"
    },
    "Q3": {
        "solve_time": "00:59:33",
        "fail_count": 10,
        "lang": "cpp",
        "code": "class Solution {\npublic:\n    int minimizeXor(int num1, int num2) {\n        const auto countSetBits = [](auto num) {\n            int count = 0;\n            while (num) {\n                count += num & 0x1;\n                num = (num >> 1);\n            }\n            return count;\n        };\n        \n        auto setBits1 = countSetBits(num1);\n        auto setBits2 = countSetBits(num2);\n        \n        std::cout << setBits1 << setBits2 << std::endl;\n        \n        if (setBits1 == setBits2) {\n            return num1;\n        } else if (setBits1 > setBits2) {\n            int num = 0;\n            auto diff = setBits2;\n            auto binary = 1;\n            while (diff) {\n                if (num1 & 0x1) {\n                    if (setBits1 <= diff) {\n                        num += binary;\n                        diff--;\n                    }\n                    setBits1--;\n                }\n                num1 = (num1 >> 1);\n                binary = binary << 1;\n            }\n            return num;\n        } else {\n            int tmpNum1 = num1;\n            int num = 0;\n            auto diff = std::abs(setBits2 - setBits1);\n            auto binary = 1;\n            while (diff) {\n                if ((num1 & 0x1) ^ 0x1) {\n                    diff--;\n                    num += binary;\n                }\n                num1 = (num1 >> 1);\n                binary = binary << 1;\n            }\n            std::cout << num << \" \" << tmpNum1 << std::endl;\n            return num + tmpNum1;\n        }\n    }\n};"
    },
    "Q4": {}
}
