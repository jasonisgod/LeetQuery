{
    "rank": 492,
    "username": "leovincentseles",
    "score": 18,
    "finish_time": "01:14:22",
    "Q1": {
        "solve_time": "00:06:01",
        "fail_count": 0,
        "lang": "cpp",
        "code": "class Solution {\npublic:\n    int countWords(vector<string>& words1, vector<string>& words2) {\n        int result = 0;\n        unordered_map<string, int> map1, map2;\n\n        for (string &s: words1) {\n            map1[s]++;\n        }\n\n        for (string &s: words2) {\n            map2[s]++;\n        }\n\n        for (auto &p: map1) {\n            if (p.second != 1)\n                continue;\n            \n            auto it = map2.find(p.first);\n            if (it == map2.end())\n                continue;\n\n            if (it->second == 1)\n                ++result;\n        }\n\n        return result;\n    }\n};"
    },
    "Q2": {
        "solve_time": "00:25:41",
        "fail_count": 0,
        "lang": "cpp",
        "code": "class Solution {\npublic:\n    int minimumBuckets(string street) {\n        if (street.length() == 1) {\n            if (street[0] == '.')\n                return 0;\n            return -1;\n        }\n\n        int count = 0;\n\n        if (street[0] == 'H') {\n            if (street[1] != '.')\n                return -1;\n            ++count;\n            street[1] = 'B';\n        }\n\n\n        for (int i=1; i<street.length(); ++i) {\n            char ch = street[i];\n\n            if (ch != 'H')\n                continue;\n\n            if (street[i - 1] == 'B')\n                continue;\n\n            if (street[i - 1] == 'H') {\n                if ((i+1) >= street.length() || street[i+1] == 'H')\n                    return -1;\n                ++count;\n                street[i+1] = 'B';            \n                continue;\n            }\n\n            // now street[i-1] is '.'\n            if (i+2 < street.length() && street[i+1] == '.' && street[i+2] == 'H') {\n                ++count;\n                street[i+1] = 'B';\n                continue;\n            }\n\n            ++count;\n            street[i-1] = 'B';\n        }\n\n        return count;\n    }\n};"
    },
    "Q3": {
        "solve_time": "00:38:33",
        "fail_count": 0,
        "lang": "cpp",
        "code": "class Solution {\npublic:\n    int minCost(vector<int>& startPos, vector<int>& homePos, vector<int>& rowCosts, vector<int>& colCosts) {\n        int cost = 0;\n\n        int diff = startPos[0] < homePos[0]? 1: -1;\n        if (startPos[0] != homePos[0]) {\n            for (int row=startPos[0]+diff; row!=homePos[0]; row+=diff) {\n                cost += rowCosts[row];\n            }\n\n            cost += rowCosts[homePos[0]];\n        }\n\n        diff = startPos[1] < homePos[1]? 1: -1;\n        if (startPos[1] != homePos[1]) {\n            for (int col=startPos[1]+diff; col!=homePos[1]; col+=diff) {\n                cost += colCosts[col];\n            }\n\n            cost += colCosts[homePos[1]];\n        }\n\n        return cost;\n    }\n};"
    },
    "Q4": {
        "solve_time": "01:14:22",
        "fail_count": 0,
        "lang": "cpp",
        "code": "class Solution {\npublic:\n    int countPyramids(vector<vector<int>>& grid) {\n        int m = grid.size(), n = grid[0].size();\n        vector<vector<int>> dp(m, vector<int>(n, 0));\n        vector<int> colLeft(n, 0);\n        vector<int> colRight(n, 0);\n\n        for (int j=0; j<n; ++j) {            \n            dp[0][j] = grid[0][j];\n        }\n\n        for (int i=1; i<m; ++i) {\n            int leftZero = 0;\n            for (int j=0; j<n; ++j) {\n                if (grid[i][j] == 0) {\n                    colLeft[j] = 0;\n                    leftZero = 0;\n                    continue;\n                }\n\n                colLeft[j] = ++leftZero;\n            }\n\n            int rightZero = 0;\n            for (int j=n-1; j>=0; --j) {\n                if (grid[i][j] == 0) {\n                    colRight[j] = 0;\n                    rightZero = 0;\n                    continue;\n                }\n\n                colRight[j] = ++rightZero;\n            }\n\n            for (int j=0; j<n; ++j) {\n                int highest = min(colRight[j], colLeft[j]);\n                dp[i][j] = min(dp[i-1][j] + 1, highest);\n            }\n        }\n\n        int result = 0;\n        for (int i=0; i<m; ++i) {\n            for (int j=0; j<n; ++j) {\n                if (dp[i][j] > 1) {\n                    result += (dp[i][j] - 1);\n                }\n\n                dp[i][j] = 0;\n            }\n        }\n\n        for (int j=0; j<n; ++j) {            \n            dp[m-1][j] = grid[m-1][j];\n        }\n\n        for (int i=m-2; i>=0; --i) {\n            int leftZero = 0;\n            for (int j=0; j<n; ++j) {\n                if (grid[i][j] == 0) {\n                    colLeft[j] = 0;\n                    leftZero = 0;\n                    continue;\n                }\n\n                colLeft[j] = ++leftZero;\n            }\n\n            int rightZero = 0;\n            for (int j=n-1; j>=0; --j) {\n                if (grid[i][j] == 0) {\n                    colRight[j] = 0;\n                    rightZero = 0;\n                    continue;\n                }\n\n                colRight[j] = ++rightZero;\n            }\n\n            for (int j=0; j<n; ++j) {\n                int highest = min(colRight[j], colLeft[j]);\n                dp[i][j] = min(dp[i+1][j] + 1, highest);\n            }\n        }\n\n        for (int i=0; i<m; ++i) {\n            for (int j=0; j<n; ++j) {\n                if (dp[i][j] > 1) {\n                    result += (dp[i][j] - 1);\n                }                \n            }\n        }\n\n        return result;\n    }\n};"
    }
}
