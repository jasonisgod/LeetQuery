{
    "rank": 6369,
    "username": "lh070355",
    "score": 7,
    "finish_time": "00:44:51",
    "Q1": {
        "solve_time": "00:20:32",
        "fail_count": 0,
        "lang": "python3",
        "code": "class Solution:\n    def arithmeticTriplets(self, nums: List[int], diff: int) -> int:\n        s = set(nums)\n        count = 0\n        \n        for num in nums:\n            if num + diff in s and num + 2 * diff in s:\n                count += 1\n        \n        return count"
    },
    "Q2": {
        "solve_time": "00:39:51",
        "fail_count": 1,
        "lang": "python3",
        "code": "from collections import defaultdict, deque\n\n# bfs would be better than dfs?\nclass Solution:\n    def reachableNodes(self, n: int, edges: List[List[int]], restricted: List[int]) -> int:\n        dires = defaultdict(list)\n        restricted_s = set(restricted)\n        count = 0\n        queue = deque((0,))\n        for a, b in edges:\n            if a not in restricted_s:\n                dires[a].append(b)\n            if b not in restricted_s:\n                dires[b].append(a)\n                \n        while queue:\n            top = queue.popleft()\n            if top in dires:\n                count += 1\n                for dire in dires[top]:\n                    queue.append(dire)\n                del dires[top]\n            \n        return count"
    },
    "Q3": {},
    "Q4": {}
}
