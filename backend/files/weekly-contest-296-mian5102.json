{
    "rank": 7736,
    "username": "mian5102",
    "score": 12,
    "finish_time": "00:57:42",
    "Q1": {
        "solve_time": "00:12:50",
        "fail_count": 0,
        "lang": "cpp",
        "code": "class Solution {\npublic:\n    int minMaxGame(vector<int>& nums) {\n        if (nums.size() == 1) return nums[0];\n        \n        while (nums.size() > 1) {\n            int i = 0;\n            vector<int> temp;\n            bool min = true;\n            while (i < nums.size()) {\n                if (min and i < nums.size()) {\n                    temp.push_back(std::min(nums[i], nums[i+1]));\n                    min = false;\n                    i = i + 2;\n                } else if (!min and i < nums.size()) {\n                    temp.push_back(std::max(nums[i], nums[i+1]));\n                    min = true;\n                    i = i + 2;\n                }\n            }\n            swap(temp, nums);\n        }\n        \n        return nums[0];\n    }\n};"
    },
    "Q2": {
        "solve_time": "00:24:20",
        "fail_count": 0,
        "lang": "cpp",
        "code": "class Solution {\npublic:\n    int partitionArray(vector<int>& nums, int k) {\n        sort(nums.begin(), nums.end());\n        \n        int ans = 0;\n        for (int i = 0; i < nums.size();) {\n            ans++;\n            int min = nums[i];\n            int j = i+1;\n            while (j < nums.size()) {\n                if (nums[j] - min <= k)\n                    j++;\n                else\n                    break;\n            }\n            i = j;\n        }\n        \n        return ans;\n    }\n};"
    },
    "Q3": {
        "solve_time": "00:57:42",
        "fail_count": 0,
        "lang": "cpp",
        "code": "class Solution {\npublic:\n    vector<int> arrayChange(vector<int>& nums, vector<vector<int>>& operations) {\n        unordered_map<int, int> m;\n        for (int i = 0; i < nums.size(); i++) {\n            m[nums[i]] = i;\n        }\n        \n        for (vector<int> op : operations) {\n            auto it = m.find(op[0]);\n            if (it != m.end()) {\n                int idx = it->second;\n                m.erase(it);\n                m[op[1]] = idx;\n            }\n        }        \n        \n        for (auto it : m) {\n            nums[it.second] = it.first;\n        }\n        return nums;\n    }\n};"
    },
    "Q4": {}
}
