{
    "rank": 1086,
    "username": "seali",
    "score": 13,
    "finish_time": "01:19:28",
    "Q1": {
        "solve_time": "00:03:10",
        "fail_count": 0,
        "lang": "cpp",
        "code": "class Solution {\npublic:\n    int rearrangeCharacters(string s, string target) {\n        \n        unordered_map<char, int> map;\n        \n        for(auto c : s)\n            map[c] ++;\n        \n        unordered_map<char, int> t;\n        \n        for(auto c : target)\n            t[c] ++;\n        \n        int output = INT_MAX;\n        \n        for(auto& pair_ : t) {\n            \n            char c = pair_.first; int val = pair_.second;\n            \n            output = min(output, map[c]/val);\n        }\n        \n        return output;\n        \n    }\n};"
    },
    "Q2": {
        "solve_time": "00:36:02",
        "fail_count": 3,
        "lang": "cpp",
        "code": "class Solution {\nprivate:\n    vector<string> tokenize(string& sentence) {\n        \n        vector<string> output;\n        string tmp;\n        for(int i = 0; i < sentence.size(); i++) {\n            char c = sentence[i];\n            if(c == ' ') {\n                output.push_back(tmp);\n                tmp = \"\";\n                string t = \" \";\n                output.push_back(t);\n            } else\n                tmp += c;\n        }\n        \n        if (tmp.size())\n            output.push_back(tmp);\n        return output;\n        \n    }\npublic:\n    string discountPrices(string sentence, int discount) {\n        \n        auto tokens = tokenize(sentence);\n        string output;\n        \n        for(auto& token : tokens) {\n            int count = 0;\n            for(auto c : token) {\n                if (c == '$')\n                    count ++;\n                else if ( c < 48 || c > 48+9 )\n                    count += 100;\n            }\n            \n            \n            if (count != 1) {\n                output += token;\n            }\n            \n            else if (token.size() >= 2 && token[0] == '$' && token[1] != '-') {\n                string tmp;\n                tmp = token.substr(1);\n                double val = std::stod(tmp);\n                val *= 1.*(100-discount);\n                long long x = val;\n                tmp = to_string(x);\n                string o;\n                o += '$';\n                if (x < 100) {\n                    o+= \"0.\"; if (tmp.size() < 2) o+= \"0\"; o += tmp;   \n                } else {\n                    string y = to_string(x%100);\n                    o += to_string(x/100) + \".\" ; if (y.size()<2) o+=\"0\"; o+= y;\n                }\n                output += o;\n            }\n                \n            else {\n                output += token;\n            }\n        }\n        return output;\n        \n    }\n};"
    },
    "Q3": {},
    "Q4": {
        "solve_time": "00:54:28",
        "fail_count": 2,
        "lang": "cpp",
        "code": "#define PP pair<int, pair<int, int>>\nclass Solution {\npublic:\n    int minimumObstacles(vector<vector<int>>& grid) {\n        \n        priority_queue<PP, vector<PP>, std::greater<PP>> pq;\n        \n        vector<vector<int>> visited(grid.size(), vector<int>(grid[0].size(), INT_MAX));\n        \n        pq.push({grid[0][0],{0,0}});\n        \n        while(pq.size()) {\n            \n            auto pair_ = pq.top(); pq.pop();\n            \n            int x = pair_.second.first; int y = pair_.second.second; int step = pair_.first;\n            \n            if (visited[x][y] <= step)\n                continue;\n            \n            visited[x][y] = step;\n            \n            if (x == grid.size() -1 && y == grid[0].size()-1)\n                return step;\n            \n            if (x != 0 && step+grid[x-1][y] < visited[x-1][y])\n                pq.push({step+grid[x-1][y],{x-1,y}});\n            if (x+1 != grid.size() && step+grid[x+1][y] < visited[x+1][y]) \n                pq.push({step+grid[x+1][y],{x+1,y}});\n            if (y != 0 && step+grid[x][y-1] < visited[x][y-1])\n                pq.push({step+grid[x][y-1],{x,y-1}});\n            if (y+1 != grid[0].size() && step+grid[x][y+1] < visited[x][y+1]) \n                pq.push({step+grid[x][y+1],{x,y+1}});\n        }\n        \n        \n        return -1;\n        \n    }\n};"
    }
}
