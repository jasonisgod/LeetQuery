{
    "rank": 3830,
    "username": "lh070355",
    "score": 12,
    "finish_time": "01:18:46",
    "Q1": {
        "solve_time": "00:09:20",
        "fail_count": 0,
        "lang": "python3",
        "code": "class Solution:\n    def applyOperations(self, nums: List[int]) -> List[int]:\n        for i in range(len(nums) - 1):\n            if nums[i] == nums[i + 1]:\n                nums[i] <<= 1\n                nums[i + 1] = 0\n                \n        return (prev := [num for num in nums if num]) + [0] * (len(nums) - len(prev))"
    },
    "Q2": {
        "solve_time": "00:28:05",
        "fail_count": 1,
        "lang": "python3",
        "code": "from collections import Counter\n\nclass Solution:\n    def maximumSubarraySum(self, nums: List[int], k: int) -> int:\n        counter = Counter(nums[:k])\n        duplicate = set()\n        slide_sum = 0\n        for num, count in counter.items():\n            slide_sum += num * count\n            if count > 1:\n                duplicate.add(num)\n        max_sum = 0 if duplicate else slide_sum\n        \n        for i, num in enumerate(nums[k:]):\n            slide_sum = slide_sum + num - nums[i]\n            counter[num] += 1\n            counter[nums[i]] -= 1\n            if counter[num] > 1:\n                duplicate.add(num)\n            if counter[nums[i]] == 1:\n                duplicate.discard(nums[i])\n            if len(duplicate) == 0 and slide_sum > max_sum:\n                max_sum = slide_sum\n            \n        return max_sum"
    },
    "Q3": {
        "solve_time": "01:13:46",
        "fail_count": 0,
        "lang": "python3",
        "code": "from heapq import heappop, heappush, nsmallest\n\nclass Solution:\n    def totalCost(self, costs: List[int], k: int, candidates: int) -> int:\n        if len(costs) == k:\n            return sum(costs)\n        if len(costs) <= (candidates << 1):\n            return sum(nsmallest(k, costs))\n        heap = list(zip(costs[:candidates], range(candidates))) + list(zip(costs[-candidates:], range(len(costs) - candidates, len(costs))))\n        # print(heap)\n        heapify(heap)\n        stack = []\n        left, right = candidates, len(costs) - 1 - candidates\n        # print(left, right)\n            \n        while left <= right and len(stack) < k:\n            # print(heap, left, right, stack)\n            if heap[0][1] < left:\n                stack.append(heapreplace(heap, (costs[left], left))[0])\n                left += 1\n            else:\n                stack.append(heapreplace(heap, (costs[right], right))[0])\n                right -= 1\n                \n        # print(nsmallest(k - len(stack), heap))\n            \n        return sum(stack) + sum(num for num, _ in nsmallest(k - len(stack), heap)) # be aware"
    },
    "Q4": {}
}
