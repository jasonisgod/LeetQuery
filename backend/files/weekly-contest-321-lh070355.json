{
    "rank": 4554,
    "username": "lh070355",
    "score": 12,
    "finish_time": "00:31:15",
    "Q1": {
        "solve_time": "00:12:17",
        "fail_count": 0,
        "lang": "python3",
        "code": "class Solution:\n    def pivotInteger(self, n: int) -> int:\n        total = (n + 1) * n // 2\n        accu = 0\n        \n        for i in range(1, n + 1):\n            if (accu := accu + i) == total:\n                return i\n            if accu > total:\n                return -1\n            total -= i\n            \n        return -1\n        "
    },
    "Q2": {
        "solve_time": "00:18:16",
        "fail_count": 0,
        "lang": "python3",
        "code": "class Solution:\n    def appendCharacters(self, s: str, t: str) -> int:\n        t_i = 0\n        len_t = len(t)\n        \n        for s_i in range(len(s)):\n            if s[s_i] != t[t_i]:\n                continue\n            if (t_i := t_i + 1) == len_t:\n                return 0\n\n        return len(t) - t_i"
    },
    "Q3": {
        "solve_time": "00:31:15",
        "fail_count": 0,
        "lang": "python3",
        "code": "# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution:\n    def removeNodes(self, head: Optional[ListNode]) -> Optional[ListNode]:\n        stack = [ListNode(val=10 ** 5 + 1)]\n        cur = head\n        \n        while cur:\n            while cur.val > stack[-1].val:\n                stack.pop()\n            stack.append(cur)\n            cur = cur.next\n        if len(stack) == 1:\n            return None\n        \n        head = cur = stack[1]\n        \n        for i in range(2, len(stack)):\n            cur.next = stack[i] # check later\n            cur = stack[i]\n        \n        return head\n        "
    },
    "Q4": {}
}
