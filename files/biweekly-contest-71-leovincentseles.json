{
    "rank": 372,
    "username": "leovincentseles",
    "score": 18,
    "finish_time": "01:16:53",
    "Q1": {
        "solve_time": "00:12:20",
        "fail_count": 0,
        "code": "class Solution {\npublic:\n    int minimumSum(int num) {\n        int minSum = INT_MAX;\n        string numStr = to_string(num);\n        \n        for (int i=0; i<4; ++i) {\n            string numA;\n            numA += numStr[i];\n            string numB = numStr;\n            numB.erase(numB.begin()+i);\n                        \n            sort(numA.begin(), numA.end());            \n            sort(numB.begin(), numB.end());            \n            \n            // printf(\"%s, %s\\n\", numA.c_str(), numB.c_str());\n            minSum = min(minSum, stoi(numA) + stoi(numB));\n        }\n        \n        for (int i=0; i<4; ++i) {\n            for (int j=i+1; j<4; ++j) {\n                string numA;\n                numA += numStr[i];\n                numA += numStr[j];\n                \n                string numB = numStr;\n                numB.erase(numB.begin()+j);\n                numB.erase(numB.begin()+i);\n                \n                sort(numA.begin(), numA.end());\n                sort(numB.begin(), numB.end());\n                \n                // printf(\"%s, %s\\n\", numA.c_str(), numB.c_str());\n                minSum = min(minSum, stoi(numA) + stoi(numB));\n            }\n        }\n        \n        return minSum;\n    }\n};"
    },
    "Q2": {
        "solve_time": "00:15:59",
        "fail_count": 0,
        "code": "class Solution {\npublic:\n    vector<int> pivotArray(vector<int>& nums, int pivot) {\n        vector<int> small, large, result;\n        int count = 0;\n        \n        for (int num: nums) {\n            if (num < pivot)\n                small.push_back(num);\n            else if (num == pivot)\n                ++count;\n            else\n                large.push_back(num);\n        }\n        \n        for (int num: small)\n            result.push_back(num);\n        \n        for (int i=0; i<count; ++i)\n            result.push_back(pivot);\n        \n        for (int num: large)\n            result.push_back(num);\n        \n        return result;        \n    }\n};"
    },
    "Q3": {
        "solve_time": "00:36:47",
        "fail_count": 1,
        "code": "class Solution {\npublic:\n    int calc(int startAt, int moveCost, int pushCost, int minute, int second) {\n        string minStr = to_string(minute), secStr = to_string(second);\n        if (minStr.size() == 1)\n            minStr = \"0\" + minStr;\n        if (secStr.size() == 1)\n            secStr = \"0\" + secStr;\n        \n        string typeStr = minStr + secStr;\n        int pos = typeStr.find_first_not_of('0');\n        if (pos == string::npos)\n            return 0;\n        typeStr = typeStr.substr(pos);\n        \n        int cost = 0;\n        for (char ch: typeStr) {\n            if (ch - '0' != startAt)\n                cost += moveCost;\n            cost += pushCost;\n            startAt = ch - '0';\n        }\n                \n        return cost;\n    }\n    int minCostSetTime(int startAt, int moveCost, int pushCost, int targetSeconds) {\n        int minute = targetSeconds / 60, second = targetSeconds % 60;\n        int minCost = INT_MAX;\n        \n        do {\n            if (minute < 100)\n                minCost = min(minCost, calc(startAt, moveCost, pushCost, minute, second));\n            --minute;\n            second += 60;\n        } while (second < 100 && minute >= 0);\n        \n        return minCost;\n    }\n};"
    },
    "Q4": {
        "solve_time": "01:11:53",
        "fail_count": 0,
        "code": "/*\nClarification:\n    Given:\n        vector<int> nums        \n    Return:\n        long long minimum difference;\n        \nChoose the n number from the nums array\n\nChoose the first n numbers, and the last n numbers\nUse a division bar, first part and second part\n\n(first part - unchoose from first) - (second part - unchoose from second)\nfirst part(fixed) - second part(fixed) - unchoose from first(largest) + unchoose from second(smallest)\n\nunchoose from first: maxHeap, get K largest sum\nunchoose from second: minHeap\n\nSolution: heap\n    Time Complexity: O(NlogN)\n    Space Complexity: O(N)\n*/\n\ntypedef long long int LLI;\n\nclass Cmp {\npublic:\n    bool operator()(const int &lhs, const int &rhs) {\n        return lhs > rhs;\n    }\n};\n\nclass Solution {\npublic:\n    long long minimumDifference(vector<int>& nums) {\n        int N = nums.size() / 3;\n        priority_queue<int, vector<int>> maxHeap(nums.begin(), nums.begin() + N);\n        priority_queue<int, vector<int>, Cmp> minHeap(nums.begin()+2*N, nums.end());\n        vector<LLI> unFirst(N+1, 0), unSecond(N+1, 0);\n        \n        for (int i=1; i<=N; ++i) {\n            maxHeap.push(nums[N+i-1]);\n            unFirst[i] = unFirst[i-1] + (LLI)maxHeap.top();\n            maxHeap.pop();            \n        }\n        \n        for (int i=N-1; i>=0; --i) {\n            minHeap.push(nums[N+i]);\n            unSecond[i] = unSecond[i+1] + (LLI)minHeap.top();\n            minHeap.pop();            \n        }\n        \n        \n        LLI leftSum = accumulate(nums.begin(), nums.begin()+N, 0L);\n        LLI rightSum = accumulate(nums.begin()+N, nums.end(), 0L);\n        LLI result = LLONG_MAX;\n        \n        for (int i=0; i<=N; ++i) {\n            result = min(result, leftSum - rightSum - unFirst[i] + unSecond[i]);\n            leftSum += nums[N+i];\n            rightSum -= nums[N+i];\n        }   \n        \n        return result;\n    }\n};"
    }
}
