{
    "rank": 2717,
    "username": "jasonisgod",
    "score": 12,
    "finish_time": "01:04:51",
    "Q1": {
        "solve_time": "00:12:56",
        "fail_count": 0,
        "code": "class Solution {\npublic:\n    vector<int> sortEvenOdd(vector<int>& nums) {\n        int n = nums.size();\n        vector<int> odd, even, ans;\n        for (int i = 0; i < n; i++) {\n            if (i % 2 == 0) {\n                even.push_back(nums[i]);\n            } else {\n                odd.push_back(nums[i]);\n            }\n        }\n        sort(odd.begin(), odd.end(), greater<int>());\n        sort(even.begin(), even.end());\n        for (int i = 0; i < n; i++) {\n            if (i % 2 == 0) {\n                ans.push_back(even[i/2]);\n            } else {\n                ans.push_back(odd[i/2]);\n            }\n        }\n        return ans;\n    }\n};"
    },
    "Q2": {
        "solve_time": "00:20:06",
        "fail_count": 0,
        "code": "class Solution {\npublic:\n    long long biggest(unsigned long long num) {\n        vector<int> v;\n        while (num > 0) {\n            v.push_back(num % 10);\n            num /= 10;\n        }\n        sort(v.begin(), v.end(), greater<int>());\n        long long ans = 0;\n        for (int i: v) {\n            ans = ans*10 + i;\n        }\n        return ans;\n    }\n    long long smallest(unsigned long long num) {\n        vector<int> v;\n        while (num > 0) {\n            v.push_back(num % 10);\n            num /= 10;\n        }\n        sort(v.begin(), v.end());\n        for (int i = 0; i < v.size(); i++) {\n            if (v[i] != 0) {\n                if (v[0] == 0) {\n                    v[0] = v[i];\n                    v[i] = 0;\n                }\n                break;\n            }\n        }\n        long long ans = 0;\n        for (int i: v) {\n            ans = ans*10 + i;\n        }\n        return ans;\n    }\n    long long smallestNumber(long long num) {\n        return num > 0? smallest(num): -biggest(-num);\n    }\n};"
    },
    "Q3": {
        "solve_time": "00:44:51",
        "fail_count": 4,
        "code": "class Bitset {\n    int size;\n    int bits[100000+1] = {0};\n    int ones = 0;\n    bool flag = false;\npublic:\n    Bitset(int size) {\n        this->size = size;\n    }\n    \n    void fix(int idx) {\n        if (bits[idx] == flag) ones++;\n        bits[idx] = !flag;\n        // cout << \"fix \" << toString() << \" \" << ones << endl;\n    }\n    \n    void unfix(int idx) {\n        if (bits[idx] == !flag) ones--;\n        bits[idx] = flag;\n        // cout << \"unfix \" << toString() << \" \" << ones << endl;\n    }\n    \n    void flip() {\n        flag = !flag;\n        ones = size - ones;\n        // cout << \"flip \" << toString() << \" \" << ones << endl;\n    }\n    \n    bool all() {\n        // cout << \"all \" << (size == ones) << endl;\n        return size == ones;\n    }\n    \n    bool one() {\n        // cout << \"one \" << (ones >= 1) << endl;\n        return ones >= 1;\n    }\n    \n    int count() {\n        // cout << \"count \" << (ones) << endl;\n        return ones;\n    }\n    \n    string toString() {\n        string s = \"\";\n        for (int i = 0; i < size; i++) {\n            s += (bits[i] ^ flag? \"1\": \"0\");\n        }\n        return s;\n    }\n};\n\n/**\n * Your Bitset object will be instantiated and called as such:\n * Bitset* obj = new Bitset(size);\n * obj->fix(idx);\n * obj->unfix(idx);\n * obj->flip();\n * bool param_4 = obj->all();\n * bool param_5 = obj->one();\n * int param_6 = obj->count();\n * string param_7 = obj->toString();\n */"
    },
    "Q4": {}
}
