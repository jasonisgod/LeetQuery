{
    "rank": 1191,
    "username": "leovincentseles",
    "score": 18,
    "finish_time": "01:40:19",
    "Q1": {
        "solve_time": "00:04:09",
        "fail_count": 0,
        "lang": "cpp",
        "code": "class Cmp {\npublic:\n    bool operator()(const int &lhs, const int &rhs) {\n        return lhs > rhs;\n    }\n};\n\nclass Solution {\npublic:\n    int minimumCost(vector<int>& cost) {\n        int totalCost = 0;\n        sort(cost.begin(), cost.end(), Cmp());\n        \n        for (int i=0; i<cost.size(); ++i) {\n            if (i % 3 == 2)\n                continue;\n            totalCost += cost[i];\n        }\n        \n        return totalCost;\n    }\n};"
    },
    "Q2": {
        "solve_time": "00:13:04",
        "fail_count": 0,
        "lang": "cpp",
        "code": "/*\nClarification:\n    Given:\n        vector<int> differences\n        int lower \n            the range of hidden values\n        int upper        \n    Return:\n        int result\n            the number of possible hidden sequences            \n*/\n\ntypedef long long int LLI;\n\nclass Solution {\npublic:\n    int numberOfArrays(vector<int>& differences, int lower, int upper) {\n        LLI minVal = 0, maxVal = 0, sum = 0;\n        for (int diff: differences) {\n            sum += diff;\n            minVal = min(minVal, sum);\n            maxVal = max(maxVal, sum);\n        }\n        \n        LLI LLIlower = lower, LLIupper = upper, result;        \n        result = LLIupper - (maxVal + LLIlower - minVal) + 1;\n        if (result <= 0)\n            return 0;\n            \n        return result;\n    }\n};"
    },
    "Q3": {
        "solve_time": "00:46:13",
        "fail_count": 3,
        "lang": "cpp",
        "code": "/*\nClarification:\n    Given:\n        vector<vector<int>> grid\n            size: m x n\n            grid[i][j] = 0 (wall), 1 (empty), others\n        vector<int> pricing\n            [low, high]\n        vector<int> start\n            [row, col]\n    Return:\n    \nSolution: maxHeap\n    vector<int>: [price, row, col]\n    \n    \n*/\n\nclass Cmp {\npublic:\n    bool operator()(const vector<int> &lhs, const vector<int> &rhs) {\n        if (lhs[0] != rhs[0])\n            return lhs[0] > rhs[0];\n        if (lhs[1] != rhs[1])\n            return lhs[1] > rhs[1];        \n        return lhs[2] > rhs[2];                \n    }\n};\n\nclass Solution {\npublic:\n    vector<vector<int>> highestRankedKItems(vector<vector<int>>& grid, vector<int>& pricing, vector<int>& start, int k) {\n        int M = grid.size(), N = grid[0].size();        \n        vector<vector<bool>> visited(M, vector<bool>(N, false));\n        vector<vector<int>> result;\n        queue<pair<int, int>> levelQueue;\n        levelQueue.push({start[0], start[1]});\n        \n        int dir[4][2] = {{-1, 0}, {0, -1}, {0, +1}, {+1, 0}};\n        \n        for (int distance=0; !levelQueue.empty(); ++distance) {\n            int levelSize = levelQueue.size();            \n            priority_queue<vector<int>, vector<vector<int>>, Cmp> maxHeap;\n            \n            for (int i=0; i<levelSize; ++i) {\n                auto currPos = levelQueue.front();  levelQueue.pop();\n                int row = currPos.first, col = currPos.second;\n                \n                if (row < 0 || row >= M || col < 0 || col >= N || visited[row][col] == true || grid[row][col] == 0)\n                    continue;\n                \n                visited[row][col] = true;\n                // deal with start position\n                \n                if (pricing[0] <= grid[row][col] && grid[row][col] <= pricing[1])\n                    maxHeap.push({grid[row][col], row, col});\n                \n                for (int i=0; i<4; ++i) {\n                    int newRow = row + dir[i][0], newCol = col + dir[i][1];\n                    levelQueue.push({newRow, newCol});\n                }                \n            }\n            \n            while (!maxHeap.empty() && result.size() < k) {\n                auto currInfo = maxHeap.top();    maxHeap.pop();\n                int row = currInfo[1], col = currInfo[2];\n                result.push_back({row, col});\n            }\n            \n            if (result.size() == k)\n                break;\n        }        \n        \n        return result;\n    }\n};"
    },
    "Q4": {
        "solve_time": "01:20:19",
        "fail_count": 1,
        "lang": "cpp",
        "code": "/*\nClarification:\n    Given:\n        string corridor        \n    Return:    \n        the number of ways        \n\nSolution: Dynamic Programming\n\n\"SSPPSPS\"\n 1222334\n \n\"PPSPSP\"\n 001022\n \n \n\"SSPPSPS\"\n 001\n*/\nclass Solution {\npublic:\n    int numberOfWays(string corridor) {                        \n        vector<int> prefix(corridor.size(), 0);\n        prefix[0] = corridor[0] == 'S'? 1: 0;\n        for (int i=1; i<corridor.size(); ++i)\n            prefix[i] = prefix[i-1] + ((corridor[i] == 'S')? 1: 0);\n        \n        if (prefix.back() < 2 || prefix.back() % 2 == 1)\n            return 0;\n                \n        while (prefix.size() > 1 && prefix.back() == prefix[prefix.size()-2])  \n            prefix.pop_back();\n                        \n        vector<int> terms(prefix.back()/2 + 1, 0);\n        for (int i=0; i<prefix.size(); ++i) {\n            if (prefix[i] == 0 || (prefix[i] & 1) != 0)\n                continue;\n            ++terms[prefix[i] / 2];\n        }\n        /*\n        \n        for (int i=0; i<terms.size(); ++i)\n            printf(\"[%d, %d] \", i, terms[i]);\n        */\n        long long int result = 1;\n        for (int i=1; i<terms.size(); ++i)        \n            result = (result * (long long int)terms[i]) % 1000000007;\n        return result;        \n    }\n};"
    }
}
