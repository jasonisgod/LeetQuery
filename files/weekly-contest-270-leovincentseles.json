{
    "rank": 993,
    "username": "leovincentseles",
    "score": 12,
    "finish_time": "00:48:48",
    "Q1": {
        "solve_time": "00:15:20",
        "fail_count": 1,
        "lang": "cpp",
        "code": "class Solution {\nprivate:\n    vector<int> result;    \n    vector<bool> used;\n    vector<int> path;\n    \n    void backtracking(vector<int>& digits, vector<bool> &used, vector<int> &path) {\n        if (path.size() == 3) {\n            result.push_back(path[0] * 100 + path[1] * 10 + path[2]);\n            return;\n        }\n        \n        int currUsed[10] = {0};\n        \n        for (int i=0; i<digits.size(); ++i) {\n            if (used[i] == true) {\n                continue;\n            }\n            \n            if (currUsed[digits[i]] == true) {\n                continue;\n            }\n            \n            if (path.size() == 0 && digits[i] == 0) {\n                continue;\n            }\n            \n            if (path.size() == 2 && digits[i] % 2 == 1) {\n                continue;\n            }\n            \n            currUsed[digits[i]] = 1;\n            used[i] = true;\n            path.push_back(digits[i]);\n            backtracking(digits, used, path);\n            used[i] = false;\n            path.pop_back();\n        }\n    }\npublic:\n    vector<int> findEvenNumbers(vector<int>& digits) {\n        result.clear();\n        used.resize(digits.size());\n        for (int i=0; i<used.size(); ++i) {\n            used[i] = false;\n        }\n        path.clear();\n        \n        backtracking(digits, used, path);\n        \n        sort(result.begin(), result.end());\n        \n        return result;\n    }\n};"
    },
    "Q2": {
        "solve_time": "00:22:03",
        "fail_count": 0,
        "lang": "cpp",
        "code": "/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode() : val(0), next(nullptr) {}\n *     ListNode(int x) : val(x), next(nullptr) {}\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\n * };\n */\nclass Solution {\npublic:\n    ListNode* deleteMiddle(ListNode* head) {\n        ListNode *curr = head;\n        int size = 0;\n        while (curr != nullptr) {\n            ++size;\n            curr = curr->next;\n        }\n        \n        if (size == 1)\n            return nullptr;\n        if (size == 2) {\n            head->next = nullptr;\n            return head;\n        }\n        \n        int deleteIdx = size / 2;\n        curr = head;\n        ListNode *prev;\n        \n        while (deleteIdx > 0)  {\n            prev = curr;\n            curr = curr->next;\n            deleteIdx--;\n        }\n        \n        prev->next = curr->next;\n            \n        return head;\n    }\n};"
    },
    "Q3": {
        "solve_time": "00:43:48",
        "fail_count": 0,
        "lang": "cpp",
        "code": "/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\nprivate:\n    string path;\n    string resultPath;\n    void traversal(TreeNode *curr, int val) {\n        if (curr == nullptr)\n            return;\n        if (curr->val == val) {\n            resultPath = path;\n            return;\n        }\n        \n        path.push_back('L');\n        traversal(curr->left, val);\n        path.pop_back();\n        path.push_back('R');\n        traversal(curr->right, val);\n        path.pop_back();    \n    }\n\npublic:\n    string getDirections(TreeNode* root, int startValue, int destValue) {\n        path.clear();\n        resultPath.clear();\n        traversal(root, startValue);\n        string pathToStart = resultPath;\n        path.clear();\n        resultPath.clear();\n        traversal(root, destValue);\n        string pathToDest = resultPath;\n        \n        int commonLen = 0;\n        for (int i=0; i<pathToStart.size() && i<pathToDest.size(); ++i) {\n            if (pathToStart[i] != pathToDest[i])\n                break;\n            commonLen++;\n        }\n        \n        pathToStart = pathToStart.substr(commonLen);\n        pathToDest = pathToDest.substr(commonLen);\n        \n        for (int i=0; i<pathToStart.size(); ++i) {\n            pathToStart[i] = 'U';\n        }\n        \n        return pathToStart + pathToDest;\n    }\n};"
    },
    "Q4": {}
}
