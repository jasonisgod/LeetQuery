{
    "rank": 891,
    "username": "leovincentseles",
    "score": 19,
    "finish_time": "01:17:44",
    "Q1": {
        "solve_time": "00:04:59",
        "fail_count": 0,
        "lang": "cpp",
        "code": "class Solution {\nprivate:\n    bool isAnagram(string &sa, string &sb) {\n        int countA[26] = {0}, countB[26] = {0};\n        \n        for (char ch: sa)\n            ++countA[ch - 'a'];\n        \n        for (char ch: sb)\n            ++countB[ch - 'a'];\n        \n        for (int i=0; i<26; ++i)\n            if (countA[i] != countB[i])\n                return false;\n        \n        return true;\n    }\npublic:\n    vector<string> removeAnagrams(vector<string>& words) {\n        for (int i=1; i<words.size(); ++i) {\n            if (isAnagram(words[i], words[i-1])) {\n                words.erase(words.begin()+i, words.begin()+i+1);\n                --i;\n            }\n        }\n        \n        return words;\n    }\n};"
    },
    "Q2": {
        "solve_time": "00:10:24",
        "fail_count": 0,
        "lang": "cpp",
        "code": "class Solution {\npublic:\n    int maxConsecutive(int bottom, int top, vector<int>& special) {\n        int result = 0;\n        sort(special.begin(), special.end());\n        \n        for (int floor: special) {\n            if (bottom < floor)\n                result = max(result, floor - 1 - bottom + 1);\n            bottom = floor + 1;\n        }\n        \n        result = max(result, top - bottom + 1);\n        \n        return result;\n    }\n};"
    },
    "Q3": {
        "solve_time": "00:21:45",
        "fail_count": 0,
        "lang": "cpp",
        "code": "class Solution {\npublic:\n    int largestCombination(vector<int>& candidates) {\n        int bits[32] = {0}, result = 0;\n        \n        for (int num: candidates)\n            for (int bit=0; bit<32; ++bit)\n                if (num & (1 << bit))\n                    ++bits[bit];\n        \n        for (int i=0; i<32; ++i)\n            result = max(result, bits[i]);\n        \n        return result;\n    }\n};"
    },
    "Q4": {
        "solve_time": "01:12:44",
        "fail_count": 1,
        "lang": "cpp",
        "code": "class CountIntervals {\nprivate:\n    set<pair<int, int>> rangeSet;\n    int result = 0;\npublic:\n    CountIntervals() {\n        \n    }\n    \n    void add(int left, int right) {\n        // printf(\"Add, left:%d, right:%d\\n\", left, right);\n        auto start = rangeSet.upper_bound({left, left});\n        int minVal = left, maxVal = right, accSum = 0;\n        \n        for (start=start==rangeSet.begin()? start: prev(start); start!=rangeSet.end() && start->first<=right;) {\n            int currLeft = start->first, currRight = start->second;\n            // printf(\"currLeft: %d, currRight: %d\\n\", currLeft, currRight);\n            if (currRight < left) {\n                ++start;\n                continue;\n            }\n            \n            accSum += (currRight - currLeft + 1);\n            minVal = min(minVal, currLeft);\n            maxVal = max(maxVal, currRight);\n            // printf(\"Before Erase\\n\");\n            start = rangeSet.erase(start);\n            // printf(\"After Erase\\n\");            \n            \n        }\n        \n        result += (maxVal - minVal + 1) - accSum;\n        rangeSet.insert({minVal, maxVal});\n    }\n    \n    int count() {\n        // printf(\"Cound: %d\\n\", result);\n        return result;\n    }\n};\n\n/**\n * Your CountIntervals object will be instantiated and called as such:\n * CountIntervals* obj = new CountIntervals();\n * obj->add(left,right);\n * int param_2 = obj->count();\n */"
    }
}
