{
    "rank": 2410,
    "username": "cchenglo",
    "score": 12,
    "finish_time": "00:18:27",
    "Q1": {
        "solve_time": "00:03:59",
        "fail_count": 0,
        "lang": "cpp",
        "code": "class Solution {\n    bool isAna(string a, string b) {\n        sort(a.begin(), a.end());\n        sort(b.begin(), b.end());\n        return a == b;\n    }\npublic:\n    vector<string> removeAnagrams(vector<string>& words) {\n        vector<string> ans;\n        ans.push_back(words[0]);\n        for (int i = 1; i < words.size(); i++) {\n            if (isAna(ans.back(), words[i]))\n                continue;\n            else\n                ans.push_back(words[i]);\n        }\n        return ans;\n    }\n};"
    },
    "Q2": {
        "solve_time": "00:09:22",
        "fail_count": 0,
        "lang": "cpp",
        "code": "class Solution {\npublic:\n    int maxConsecutive(int bottom, int top, vector<int>& special) {\n        int ans = 0;\n        sort(special.begin(), special.end());\n        ans = max(ans, special[0] - bottom);\n        for (int i = 1; i < special.size(); i++)\n            ans = max(ans, special[i] - special[i-1] - 1);\n        ans = max(ans, top - special.back());\n        return ans;\n    }\n};"
    },
    "Q3": {
        "solve_time": "00:13:27",
        "fail_count": 1,
        "lang": "cpp",
        "code": "class Solution {\npublic:\n    int largestCombination(vector<int>& candidates) {\n        int ans = 0;\n        for (int i = 0; i < 32; i++) {\n            int cnt = 0, mask = 1 << i;\n            for (const int &n : candidates) {\n                if (n & mask)\n                    cnt++;\n            }\n            ans = max(ans, cnt);\n        }\n        return ans;\n    }\n};"
    },
    "Q4": {}
}
