{
    "rank": 700,
    "username": "jasonisgod",
    "score": 18,
    "finish_time": "01:33:39",
    "Q1": {
        "solve_time": "00:04:01",
        "fail_count": 0,
        "lang": "cpp",
        "code": "class Solution {\npublic:\n    vector<string> divideString(string s, int k, char fill) {\n        vector<string> ans;\n        string tmp = \"\";\n        for (int i = 0; i < s.length(); i++) {\n            if (i > 0 && i % k == 0) {\n                ans.push_back(tmp);\n                tmp = \"\";\n            }\n            tmp += s[i];\n        }\n        if (tmp.length() == 0) {\n            return ans;\n        }\n        while (tmp.length() < k) {\n            tmp += fill;\n        }\n        ans.push_back(tmp);\n        return ans;\n    }\n};"
    },
    "Q2": {
        "solve_time": "00:19:07",
        "fail_count": 0,
        "lang": "cpp",
        "code": "class Solution {\npublic:\n    int minMoves(int target, int maxDoubles) {\n        int count = 0;\n        while (maxDoubles > 0 && target > 1) {\n            maxDoubles--;\n            count += target % 2;\n            target /= 2;\n            count++;\n        }\n        return count + target - 1;\n    }\n};"
    },
    "Q3": {
        "solve_time": "00:32:31",
        "fail_count": 1,
        "lang": "cpp",
        "code": "class Solution {\npublic:\n    long long mostPoints(vector<vector<int>>& questions) {\n        vector<vector<int>>& q = questions;\n        int n = q.size();\n        vector<long long> dp(n);\n        vector<long long> mx(n);\n        mx[n-1] = dp[n-1] = q[n-1][0];\n        for (int i = n-2; i >= 0; i--) {\n            int next = i + q[i][1] + 1;\n            dp[i] = max((long long)q[i][0] + (next < n? mx[next]: 0), dp[i+1]);\n            mx[i] = max(dp[i], mx[i+1]);\n        }\n        for (int i = 0; i < n; i++) {\n            printf(\"%lld \", dp[i]);\n        }\n        return dp[0];\n    }\n};"
    },
    "Q4": {
        "solve_time": "01:23:39",
        "fail_count": 1,
        "lang": "cpp",
        "code": "class Solution {\npublic:\n    long long maxRunTime(int n, vector<int>& batteries) {\n        vector<int>& b = batteries;\n        sort(b.begin(), b.end(), greater<int>());\n        long long sum = 0;\n        for (int i = n; i < b.size(); i++) {\n            sum += b[i];\n        }\n        int low = b[n-1];\n        int high;\n        int ptr = n-1;\n        while (ptr != -1) {\n            while (ptr != -1 && b[ptr] == low) {\n                ptr--;\n            }\n            if (ptr == -1) {\n                return low + sum / n;\n            }\n            high = b[ptr];\n            int count = n - ptr - 1;\n            long long fill = count*(high-low);\n            if (sum < fill) {\n                return low + sum / count;\n            }\n            sum -= fill;\n            low = high;\n        }\n        return -1;\n    }\n};"
    }
}
