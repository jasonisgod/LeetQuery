{
    "rank": 1287,
    "username": "jasonisgod",
    "score": 18,
    "finish_time": "00:54:54",
    "Q1": {
        "solve_time": "00:02:38",
        "fail_count": 0,
        "code": "class Solution {\npublic:\n    int countElements(vector<int>& nums) {\n        int mn = nums[0], mx = nums[0];\n        for (auto i: nums) {\n            mn = min(mn, i);\n            mx = max(mx, i);\n        }\n        int count = nums.size();\n        for (auto i: nums) {\n            if (i == mn || i == mx) {\n                count--;\n            }\n        }\n        return count;\n    }\n};"
    },
    "Q2": {
        "solve_time": "00:06:16",
        "fail_count": 0,
        "code": "class Solution {\npublic:\n    vector<int> rearrangeArray(vector<int>& nums) {\n        vector<int> pos, neg;\n        for (auto i: nums) {\n            if (i > 0) {\n                pos.push_back(i);\n            } else {\n                neg.push_back(i);\n            }\n        }\n        vector<int> ans;\n        for (int i = 0; i < nums.size()/2; i++) {\n            ans.push_back(pos[i]);\n            ans.push_back(neg[i]);\n        }\n        return ans;\n    }\n};"
    },
    "Q3": {
        "solve_time": "00:10:15",
        "fail_count": 0,
        "code": "class Solution {\npublic:\n    vector<int> findLonely(vector<int>& nums) {\n        sort(nums.begin(), nums.end());\n        vector<int> ans;\n        int n = nums.size();\n        for (int i = 0; i < n; i++) {\n            if ((i == 0 || nums[i-1] < nums[i]-1) && (i == n-1 || nums[i+1] > nums[i]+1)) {\n                ans.push_back(nums[i]);\n            }\n        }\n        return ans;\n    }\n};"
    },
    "Q4": {
        "solve_time": "00:44:54",
        "fail_count": 2,
        "code": "class Solution {\npublic:\n    int maximumGood(vector<vector<int>>& s) {\n        int n = s.size();\n        int ans = 0;\n        for (int m = 0; m < (1<<n); m++) {\n            bool bug = false;\n            for (int i = 0; i < n && !bug; i++) {\n                if (((1<<i) & m) == 0) {\n                    continue;\n                }\n                for (int j = 0; j < n && !bug; j++) {\n                    if ((s[i][j] == 0 && ((1<<j) & m) != 0) || (s[i][j] == 1 && ((1<<j) & m) == 0)) {\n                        bug = true;\n                    }\n                }\n            }\n            if (!bug) {\n                // bin(m);\n                // printf(\"popcount=%d\\n\", __builtin_popcount(m));\n                ans = max(ans, __builtin_popcount(m));\n            }\n        }\n        return ans;\n    }\n// void bin(long n) { long i; cout << \"0\"; for (i = 1 << 30; i > 0; i = i / 2) { if((n & i) != 0) { cout << \"1\"; } else { cout << \"0\"; } } cout << endl; }\n};"
    }
}
