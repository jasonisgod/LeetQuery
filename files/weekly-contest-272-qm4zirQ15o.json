{
    "rank": 6852,
    "username": "qm4zirQ15o",
    "score": 12,
    "finish_time": "01:31:24",
    "Q1": {
        "solve_time": "00:02:59",
        "fail_count": 0,
        "code": "class Solution {\nprivate:\n    bool check(string s){\n        for(int i=0; i<=s.size()/2 ; i++){\n            if(s[i] != s[s.size()-1-i])\n                return false;\n        }\n        return true;\n    }\npublic:\n    string firstPalindrome(vector<string>& words) {\n        for(auto s: words){\n            if(check(s))\n                return s;\n        }\n        return \"\";\n    }\n};"
    },
    "Q2": {
        "solve_time": "00:16:04",
        "fail_count": 0,
        "code": "class Solution {\npublic:\n    string addSpaces(string s, vector<int>& spaces) {\n        int shift = 0, prev = 0;\n        string ans = \"\";\n        for(auto p: spaces){\n            string front = s.substr(prev, p-prev);\n            prev = p;\n            ans += front + \" \";\n        }\n        ans += s.substr(prev);\n        return ans;\n    }\n};"
    },
    "Q3": {
        "solve_time": "01:26:24",
        "fail_count": 1,
        "code": "class Solution {\npublic:\n    long long getDescentPeriods(vector<int>& prices) {\n        vector<bool> flag(prices.size(), false);\n        int prev_dp=1, dp=0;\n        long long ans=0;\n        \n        for(int idx=1; idx<prices.size(); idx++){\n            dp = prev_dp;\n            \n            // prices[idx]\n            if(prices[idx-1] - prices[idx] == 1)\n                dp += 1;\n            else\n                dp = 1;\n                \n            ans += dp;\n            prev_dp = dp;\n        }\n        \n        return ans+1;\n    }\n};"
    },
    "Q4": {}
}
