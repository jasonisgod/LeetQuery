{
    "rank": 1119,
    "username": "qm4zirQ15o",
    "score": 12,
    "finish_time": "00:47:04",
    "Q1": {
        "solve_time": "00:07:17",
        "fail_count": 0,
        "code": "class Solution {\npublic:\n    int countWords(vector<string>& words1, vector<string>& words2) {\n        unordered_map<string, int> w1, w2;\n        \n        for(auto s: words1){\n            if(w1.find(s) != w1.end())\n                w1[s]++;\n            else\n                w1[s]=1;\n        }\n        \n        for(auto s: words2){\n            if(w2.find(s) != w2.end())\n                w2[s]++;\n            else\n                w2[s]=1;\n        }\n        \n        int count = 0;\n        for(auto p: w2){\n            // p.first is key & p.second is value\n            if(p.second == 1 && w1.find(p.first) != w1.end() && w1[p.first] == 1)\n                count++;\n        }\n        return count;\n    }\n};"
    },
    "Q2": {
        "solve_time": "00:24:16",
        "fail_count": 0,
        "code": "class Solution {\npublic:\n    int minimumBuckets(string street) {\n        int counter = 0, strlen=street.length();\n        \n        for(int i=0; i<strlen; i++)\n            if(street[i] == 'H')\n                if((i-1)>=0 && street[i-1] == 'B')\n                    continue;\n                else if((i+1)<strlen && street[i+1] == '.'){\n                    street[i+1] = 'B';\n                    counter++;\n                }\n                else if((i-1)>=0 && street[i-1] == '.'){\n                    street[i-1] = 'B';\n                    counter++;\n                }\n                else\n                    return -1;\n                \n        return counter;\n    }\n};"
    },
    "Q3": {
        "solve_time": "00:47:04",
        "fail_count": 0,
        "code": "class Solution {\npublic:\n    int minCost(vector<int>& startPos, vector<int>& homePos, vector<int>& rowCosts, vector<int>& colCosts) {\n        int ans=0;\n        \n        int row_start = min(startPos[0], homePos[0]), row_end = max(startPos[0], homePos[0]);\n        int col_start = min(startPos[1], homePos[1]), col_end = max(startPos[1], homePos[1]);\n        \n        if(row_start == startPos[0])\n            row_start += 1;\n        else\n            row_end -= 1;\n        \n        if(col_start == startPos[1])\n            col_start += 1;\n        else\n            col_end -= 1;\n        \n        for(int i=row_start; i<=row_end; i++)\n            ans += rowCosts[i];\n        for(int j=col_start; j<=col_end; j++)\n            ans += colCosts[j];\n        \n        return ans;\n    }\n};"
    },
    "Q4": {}
}
