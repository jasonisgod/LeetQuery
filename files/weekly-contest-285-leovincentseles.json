{
    "rank": 2579,
    "username": "leovincentseles",
    "score": 12,
    "finish_time": "01:22:09",
    "Q1": {
        "solve_time": "00:05:44",
        "fail_count": 0,
        "lang": "cpp",
        "code": "/*\n\n[6,6,5,5,4,1]\n\n*/\nclass Solution {\npublic:\n    int countHillValley(vector<int>& nums) {\n        int prevNum = INT_MIN;\n        vector<int> arr;\n        \n        for (int num: nums) {\n            if (num != prevNum)\n                arr.push_back(num);\n            prevNum = num;\n        }\n        \n        int count = 0;\n        \n        for (int i=1; i+1<arr.size(); ++i)\n            if ((arr[i] > arr[i-1]) == (arr[i] > arr[i+1]))\n                ++count;\n        \n        return count;        \n    }\n};"
    },
    "Q2": {
        "solve_time": "01:02:09",
        "fail_count": 1,
        "lang": "cpp",
        "code": "/*\n\n\"SSRSSRLL RSLLRSRSSRLRRRRLLRRLSSRR\"\n\nSSSSS\n\n121\n\n*/\n\nclass Solution {\npublic:\n    int countCollisions(string directions) {\n        stack<char> st;\n        int count = 0;\n        \n        for (char ch: directions) {\n            if (ch == 'L') {\n                if (st.empty() == false) {\n                    count += (st.top() == 'S')? 1: 2;\n                    st.top() = 'S';                    \n                    st.pop();\n                    \n                    while (!st.empty() && st.top() == 'R') {\n                        ++count;\n                        st.pop();\n                    }\n                    \n                    st.push('S');                        \n                }\n            } else if (ch == 'S') {\n                while (!st.empty() && st.top() == 'R') {\n                    ++count;\n                    st.pop();\n                }\n                \n                st.push('S');                                \n            } else {\n                st.push('R');\n            }\n        }\n        \n        return count;\n    }\n};"
    },
    "Q3": {
        "solve_time": "00:53:34",
        "fail_count": 3,
        "lang": "cpp",
        "code": "/*\n\nKnapsack problem\n\nbag size: numArrows,\nwant to pick subset i such that \nsum(w[i]) <= numArrows and sum(c[i]) is maximize\n\ndp[i][j] maximum points can get when consider weights[0 ... i] and bag weight is j\n\n*/\nclass Solution {\npublic:\n    vector<int> maximumBobPoints(int numArrows, vector<int>& aliceArrows) {\n        vector<int> &weights = aliceArrows;\n        int dp[12][100001] = {0};        \n        vector<int> result(weights.size(), 0);                            \n        \n        for (int i=1; i<weights.size(); ++i) {\n            for (int j=0; j<=numArrows; ++j) {\n                dp[i][j] = dp[i-1][j];\n                \n                if (j-weights[i]-1 >= 0)\n                    dp[i][j] = max(i+dp[i-1][j-weights[i]-1], dp[i][j]);\n            }\n        }\n        /*\n        for (int i=0; i<weights.size(); ++i) {\n            for (int j=0; j<=numArrows; ++j) {\n                printf(\"%d \", dp[i][j]);\n            }\n            \n            printf(\"\\n\");\n        }\n        */\n        int i = weights.size()-1, j = numArrows;\n        \n        while (dp[i][j] != 0) {\n            // printf(\"%d, %d\\n\", i, j);\n            if (dp[i][j] == dp[i-1][j])\n                --i;\n            else {\n                result[i] = weights[i] + 1;\n                j -= weights[i] + 1;\n                --i;                \n                // printf(\"i: %d, w: %d, a: %d\\n\", i, weights[i], aliceArrows[i]);\n            }\n        }\n        \n        int remain = numArrows - accumulate(result.begin(), result.end(), 0);\n        result[0] += remain;\n        \n        return result;\n    }\n};"
    },
    "Q4": {}
}
