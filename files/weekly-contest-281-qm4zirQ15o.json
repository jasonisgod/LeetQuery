{
    "rank": 6003,
    "username": "qm4zirQ15o",
    "score": 12,
    "finish_time": "01:44:30",
    "Q1": {
        "solve_time": "00:30:58",
        "fail_count": 1,
        "lang": "cpp",
        "code": "class Solution {\npublic:\n    int countEven(int num) {\n        int tmp = num, t = 0;\n        while(tmp > 0){\n            t += tmp % 10;\n            tmp /= 10;\n        }\n        \n        if(t % 2 == 0 && num % 2 == 0)\n            return num / 2;\n        return (num-1)/2;\n    }\n};"
    },
    "Q2": {
        "solve_time": "00:46:59",
        "fail_count": 1,
        "lang": "cpp",
        "code": "/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode() : val(0), next(nullptr) {}\n *     ListNode(int x) : val(x), next(nullptr) {}\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\n * };\n */\nclass Solution {\npublic:\n    ListNode* mergeNodes(ListNode* head) {\n        int merge = 0;\n        ListNode *dummy = new ListNode();\n        dummy->next = head;\n        \n        ListNode *ptr = dummy, *z0 = nullptr;\n        while(ptr != nullptr && ptr->next != nullptr){\n            if(ptr->next->val == 0){\n                if(z0 != nullptr){\n                    z0->next = (ptr->next->next != nullptr) ? (ptr->next) : nullptr;\n                    merge += ptr->val;\n                    z0->val = merge;\n                    merge = 0;\n                }\n                z0 = ptr->next;\n                ptr = ptr->next->next;\n                continue;\n            }\n            else{\n                merge += ptr->val;\n            }\n            ptr = ptr->next;\n        }\n        return head;\n    }\n};"
    },
    "Q3": {
        "solve_time": "01:29:30",
        "fail_count": 1,
        "lang": "cpp",
        "code": "class Solution {\npublic:\n    string repeatLimitedString(string s, int repeatLimit) {\n        vector<int> word(26, 0);\n        for(char c: s){\n            word[c - 'a']++;\n        }\n        \n        string ans(s.length(), '*'); // how to copy\n        int conti = 0;\n        bool flag = false;\n        \n        for(int i=0; i<s.length(); i++){\n            for(int idx=25; idx>=0; idx--){\n                if(word[idx] == 0)\n                    continue;\n                \n                char c = idx + 'a';\n                \n                if(i == 0){\n                    ans[i] = c;\n                    word[idx]--;\n                    conti = 1;\n                    flag = true;\n                    break;\n                }\n                else{\n                    if(c == ans[i-1]){\n                        if(conti == repeatLimit)\n                            continue;\n                        else{\n                            conti++;\n                            ans[i] = c;\n                            word[idx]--;\n                            flag = true;\n                            break;\n                        }\n                    }\n                    else{\n                        conti = 1;\n                        ans[i] = c;\n                        word[idx]--;\n                        flag = true;\n                        break;\n                    }\n                }\n            }\n            if(flag)\n                flag = false;\n            else\n                return ans.substr(0, i);\n        }\n        \n        return ans;\n    }\n};"
    },
    "Q4": {}
}
