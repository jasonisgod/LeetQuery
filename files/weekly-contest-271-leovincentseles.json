{
    "rank": 2586,
    "username": "leovincentseles",
    "score": 12,
    "finish_time": "00:41:59",
    "Q1": {
        "solve_time": "00:05:43",
        "fail_count": 0,
        "code": "/*\nClarification:\n    Given:\n        string rings, length 2n\n\n\n*/\n\nclass Solution {\npublic:\n    int countPoints(string rings) {\n        vector<bool> red(10, false);\n        vector<bool> green(10, false);\n        vector<bool> blue(10, false);\n        \n        for (int i=0; i<rings.size(); i+=2) {\n            char color = rings[i];\n            int idx = rings[i+1] - '0';\n            \n            switch (color) {\n                case 'R':\n                    red[idx] = true;\n                    break;\n                case 'G':\n                    green[idx] = true;\n                    break;\n                case 'B':\n                    blue[idx] = true;\n                    break;\n            }\n        }\n        \n        int count = 0;\n        for (int i=0; i<10; ++i) {\n            if (red[i] && green[i] && blue[i])\n                ++count;\n        }\n        \n        return count;\n    }\n};"
    },
    "Q2": {
        "solve_time": "00:25:41",
        "fail_count": 1,
        "code": "/*\nClarification:\n    Given:\n        vector<int> nums\n    Return:\n        the sum of all subarray ranges of nums\n        range: difference between the largest and smallest element\n\nSolution: Brute force\n    Time Complexity: O(N^3)\n    \nSolution: Dynamic Programming \n1. dp[i][j]: the range of the subarray nums[i ... j]\n   max[i][j]: the maximum of the subarray nums[i ... j]\n   min[i][j]: the minimum of the subarray nums[i ... j]\n   \n2. if (nums[j] fall in range max[i][j - 1], min[i][j - 1])\n       dp[i][j] = dp[i][j - 1];\n   else if (nums[j] > max[i][j - 1])\n       dp[i][j] = dp[i][j - 1] + nums[j] - max[i][j - 1]\n   else\n       dp[i][j] = dp[i][j - 1] + min[i][j - 1] - nums[j]\n   max[i][j] = max(nums[j], max[i][j - 1]);\n   min[i][j] = min(nums[j], min[i][j - 1]);\n3. initial condition\n   dp[i][i] = 0;\n   max[i][i] = nums[i];\n   min[i][i] = nums[i];\n4.\n   for (int i=0; i<nums.size(); ++i) {\n        for (int j=i; j<nums.size(); ++j) {\n        \n        }\n   }\n   \nTime Complexity: O(N^2)\nSpace Complexity: O(N^2)\n\n[1, 2, 3]\n*/\ntypedef long long int LLI;\n\nclass Solution {\npublic:\n    long long subArrayRanges(vector<int>& nums) {\n        int n = nums.size();\n        vector<vector<LLI>> dp(n, vector<LLI>(n, 0));\n        vector<vector<LLI>> maxVal(n, vector<LLI>(n, 0));\n        vector<vector<LLI>> minVal(n, vector<LLI>(n, 0));\n        \n        for (int i=0; i<n; ++i) {\n            dp[i][i] = 0;\n            maxVal[i][i] = nums[i];\n            minVal[i][i] = nums[i];\n        }\n        \n        for (int i=0; i<nums.size(); ++i) {\n            for (int j=i+1; j<nums.size(); ++j) {\n                LLI prevMax = maxVal[i][j - 1];\n                LLI prevMin = minVal[i][j - 1];\n                \n                if (nums[j] <= prevMax && nums[j] >= prevMin) {\n                    dp[i][j] = dp[i][j - 1];                    \n                } else if (nums[j] > prevMax) {\n                    dp[i][j] = dp[i][j - 1] + (LLI)nums[j] - prevMax;\n                } else {\n                    dp[i][j] = dp[i][j - 1] + prevMin - (LLI)nums[j];\n                }\n                \n                maxVal[i][j] = max(maxVal[i][j - 1], (LLI)nums[j]);\n                minVal[i][j] = min(minVal[i][j - 1], (LLI)nums[j]);                \n            }\n        }\n        \n        LLI sum = 0;\n        for (int i=0; i<nums.size(); ++i) {\n            for (int j=i; j<nums.size(); ++j) {\n                sum += dp[i][j];\n            }\n        }\n        \n        return sum;\n    }\n};"
    },
    "Q3": {
        "solve_time": "00:36:59",
        "fail_count": 0,
        "code": "/*\nClarification:\n\n*/\n\nclass Solution {\npublic:\n    int minimumRefill(vector<int>& plants, int capacityA, int capacityB) {\n        int canA = capacityA, canB = capacityB;\n        int times = 0;\n        \n        for (int i=0, j=plants.size()-1; i<j; ++i, --j) {\n            if (canA < plants[i]) {\n                canA = capacityA;\n                ++times;\n            }\n            canA -= plants[i];\n            \n            if (canB < plants[j]) {\n                canB = capacityB;\n                ++times;\n            }\n            canB -= plants[j];\n        }\n        \n        if (plants.size() % 2 == 1) {\n            int maxCan = max(canA, canB);\n            if (maxCan < plants[plants.size() / 2]) {\n                ++times;\n            }\n        }\n        \n        return times;\n    }\n};"
    },
    "Q4": {}
}
