{
    "rank": 2083,
    "username": "cchenglo",
    "score": 12,
    "finish_time": "00:51:31",
    "Q1": {
        "solve_time": "00:08:00",
        "fail_count": 0,
        "lang": "cpp",
        "code": "class Solution {\npublic:\n    int mostFrequent(vector<int>& nums, int key) {\n        map<int, int> m;\n        for(int i = 0; i < nums.size() - 1; i++) {\n            if(nums[i] == key)\n                m[nums[i+1]]++;\n        }\n        int ans, cnt = -1;\n        for(const auto &p : m) {\n            if(p.second > cnt) {\n                cnt = p.second;\n                ans = p.first;\n            }\n        }\n        return ans;\n    }\n};"
    },
    "Q2": {
        "solve_time": "00:28:10",
        "fail_count": 2,
        "lang": "cpp",
        "code": "class Solution {\n    int tr(vector<int>& mapping, int n) {\n        int m = 0;\n        vector<int> ns;\n        while(n) {\n            ns.push_back(n % 10);\n            n /= 10;\n        }\n        if(ns.size() == 0)  // due to while(n) { ...\n            ns.push_back(0);\n        for(int i = ns.size() - 1; i >= 0; i--) \n            m = 10 * m + mapping[ ns[i] ];\n        return m;\n    }\npublic:\n    vector<int> sortJumbled(vector<int>& mapping, vector<int>& nums) {\n        \n        vector<pair<int, int>> ps;\n        for(const int &n : nums)\n            ps.push_back({tr(mapping, n), n});\n        \n        sort(ps.begin(), ps.end(), [](pair<int, int> &p1, pair<int, int> &p2){\n            return p1.first < p2.first;\n        });\n        \n        vector<int> ans;\n        for(const auto &p : ps)\n            ans.push_back(p.second);\n        return ans;\n    }\n};"
    },
    "Q3": {
        "solve_time": "00:41:31",
        "fail_count": 0,
        "lang": "cpp",
        "code": "class Solution {\npublic:\n    vector<vector<int>> getAncestors(int n, vector<vector<int>>& edges) {\n        \n        map<int, vector<int>> bs_from_a;\n        for(const auto &edge : edges)\n            bs_from_a[edge[1]].push_back(edge[0]);\n        \n        vector<vector<int>> ans;\n        \n        for(int i = 0; i < n; i++) {\n            \n            vector<bool> visited(n, false);\n            queue<int> q;\n            \n            for(const int &b : bs_from_a[i]) {\n                q.push(b);\n                visited[b] = true;\n            }\n            \n            while(!q.empty()) {\n                int node = q.front();\n                q.pop();\n                visited[node] = true;\n                for(const int &b : bs_from_a[node])\n                    if(!visited[b])\n                        q.push(b);\n            }\n            \n            vector<int> temp;\n            for(int node = 0; node < n; node++)\n                if(visited[node])\n                    temp.push_back(node);\n            ans.push_back(temp);\n        }\n        \n        return ans;\n    }\n};"
    },
    "Q4": {}
}
